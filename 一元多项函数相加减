//需要改进
#include<stdio.h>
#include<stdlib.h>

#define LEN sizeof(Poly)

typedef struct term
{
    float coef;  //系数
    int expn;    //指数
    struct term* next;
}Poly,*Link;

void CreatePolyn(Link* p,int m)  //*p是双重指针，用此意在改变指针
//创建多项式（带头结点），基础：动态链表的创建
{
    Link r,s;
    int i;
    *p=(Link)malloc(LEN);
    r=*p;
    for(i=0;i<m;i++)
    {
        s=(Link)malloc(LEN);
        printf("输入系数和指数(以空格分开)：");
        scanf("%f %d",&s->coef,&s->expn);
        r->next=s;
        r=s;
    }
    r->next=NULL;
}

void PrintPolyn(Link p)  //打印多项式，基础：遍历链表
{
    Link s;
    s=p->next; //第一个结点
    while(s)
    {
        printf("%.2f x^%d",s->coef,s->expn);
        s=s->next;
        if(s)
        if(s->coef>=0) 
        printf("+");
    }
    printf("\n");
}
int cmp(Link a,Link b)  //比较两项的指数大小，并返回特定的值
{
    if(a->expn<b->expn) return -1;
    else if(a->expn==b->expn) return 0;
    else return 1;
}
Link AddPolyn(Link pa,Link pb)//pa,pb两个指向头结点的指针
//两个多项式相加得到一个新的多项式，并返回新多项式的头结点的指针
{
    Link newp,p,q,s,pc;
    float sum;
    p=pa->next;
    q=pb->next;
    newp=(Link)malloc(LEN);//pc指向新多项式pc的头结点
    pc=newp;
    while(p&&q)
    {
        switch (cmp(p,q))
        {
        case -1:  //若指数:p<q,则将铺所指向结点链如头结点为newp的链表中，且p向后遍历
            s=(Link)malloc(LEN);
            s->coef=p->coef;
            s->expn=p->expn;
            pc->next=s;
            pc=s;
            p=p->next;
            break;
        case 0:
            sum=p->coef+q->coef;
            if(0.0!=sum)
            {
            s=(Link)malloc(LEN);
            s->coef=sum;
            s->expn=p->expn;
            pc->next=s;
            pc=s;
            }
            p=p->next;
            q=q->next;
            break;
        case 1:
            s=(Link)malloc(LEN);
            s->coef=q->coef;
            s->expn=q->expn;
            pc->next=s;
            pc=s;
            q=q->next;
            break;
        }
    }
    while (p)
    {
            s=(Link)malloc(LEN);
            s->coef=p->coef;
            s->expn=p->expn;
            pc->next=s;
            pc=s;
            p=p->next;
    }
    while (q)
    {
        s=(Link)malloc(LEN);
            s->coef=q->coef;
            s->expn=q->expn;
            pc->next=s;
            pc=s;
            q=q->next;
    }
    pc->next=NULL;
    return newp; //返回多项式首地址
}
int main()
{
    Link P1,P2;
    int L1,L2;
    printf("升序输入\n");
    printf("请输入第一个多项式的项数:");
    scanf("%d",&L1);
    CreatePolyn(&P1,L1);
    printf("第一个多项式为:");
    PrintPolyn(P1);
    printf("请输入第二个多项式的项数:");
    scanf("%d",&L2);
    CreatePolyn(&P2,L2);
    printf("第二个多项式为:");
    PrintPolyn(P2);
    printf("\n");
    printf("两个一元多项式相加的结果:");
    PrintPolyn(AddPolyn(P1,P2));
    return 0;
}
